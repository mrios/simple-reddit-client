{"version":3,"sources":["components/posts/PostActions.js","components/posts/PostsReducers.js","configureStore.js","components/posts/Posts.js","components/posts/PostItem.js","App.js","serviceWorker.js","index.js"],"names":["fetchRedditPosts","dispatch","postId","type","fetch","then","response","json","items","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","posts","isFetching","didDismiss","shouldFetchPosts","selectedId","action","updatedPosts","obj","id","unread","lastUpdated","filteredPosts","filter","Object","assign","loggerMiddleware","createLogger","Text","Typography","Title","Content","Layout","DismissButton","danger","icon","CloseCircleTwoTone","twoToneColor","style","marginRight","color","PostTitle","item","xs","lg","UserOutlined","code","author","FieldTimeOutlined","fromNow","unix","created_utc","level","title","Posts","props","handleSelectPost","bind","handleDismissPost","this","selectPost","dismissPost","listData","className","size","itemLayout","pagination","pageSize","position","dataSource","renderItem","component","leaveReverse","Item","padding","key","actions","onClick","num_comments","Meta","avatar","shape","src","thumbnail","content","React","Component","connect","PostImage","indexOf","alt","Post","post","zIndex","isSelected","message","description","showIcon","width","find","Sider","Header","App","toggle","setState","collapsed","handleDismissAll","handleFetchData","justify","createElement","MenuUnfoldOutlined","MenuFoldOutlined","fontSize","RedditOutlined","length","marginTop","trigger","collapsible","breakpoint","collapsedWidth","PostItem","Boolean","window","location","hostname","match","preloadedState","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f932cf3b.chunk.js","sourcesContent":["import fetch from 'cross-fetch'\n\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_POST = 'SELECT_POST'\nexport const DISMISS_POST = 'DISMISS_POST'\nexport const DISMISS_ALL = 'DISMISS_ALL'\n\nexport function selectPost(postId) {\n  return {\n    type: SELECT_POST,\n    postId\n  }\n}\n\nexport function dismissPost(postId) {\n  return {\n    type: DISMISS_POST,\n    postId\n  }\n}\n\nexport function dismissAll() {\n  return {\n    type: DISMISS_ALL\n  }\n}\n\nfunction requestPosts(postId) {\n  return {\n    type: REQUEST_POSTS,\n    postId\n  }\n}\n\nfunction receivePosts(json) {\n  return {\n    type: RECEIVE_POSTS,\n    items: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchRedditPosts() {\n  return dispatch => {\n    dispatch(requestPosts())\n    // Simple API call, pagination is handle in the front-end\n    return fetch(`https://www.reddit.com/top.json?limit=50`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(json)))\n  }\n}\n\nfunction shouldFetchPosts(state) {\n  const posts = state.posts\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didDismiss\n  }\n}\n\nexport function fetchPostsIfNeeded() {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState())) {\n      return dispatch(fetchRedditPosts())\n    }\n  }\n}","import {\n  SELECT_POST,\n  DISMISS_POST,\n  DISMISS_ALL,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from './PostActions'\n\nexport default function(\n  state = {\n    isFetching: false,\n    didDismiss: false,\n    items: [],\n    selectedId: null\n  },\n  action\n) {\n  switch (action.type) {\n    case SELECT_POST:\n      const updatedPosts = state.items.map(obj => {\n          return obj.id === action.postId ? { ...obj, unread: false } : obj\n        }\n      );\n      return {\n        ...state,\n        isFetching: false,\n        items: updatedPosts,\n        lastUpdated: action.receivedAt,\n        selectedId: action.postId\n      };\n    case DISMISS_POST:\n      const filteredPosts = state.items.filter(obj => obj.id !== action.postId)\n      return {\n        ...state,\n        isFetching: false,\n        items: filteredPosts,\n        lastUpdated: action.receivedAt,\n        selectedId: null\n      };\n      case DISMISS_ALL:\n        return {\n          ...state,\n          isFetching: false,\n          items: [],\n          lastUpdated: action.receivedAt,\n          selectedId: null\n        };\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didDismiss: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didDismiss: false,\n        items: action.items,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './components/posts/PostsReducers'\n\nconst loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  )\n}","import React from 'react';\nimport { List, Avatar, Button, Tag, Spin, Typography, Layout, Row, Col } from 'antd';\nimport { CloseCircleTwoTone, UserOutlined, FieldTimeOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Moment from 'react-moment';\nimport QueueAnim from 'rc-queue-anim';\nimport {\n  selectPost,\n  fetchPostsIfNeeded,\n  dismissPost,\n} from './PostActions'\n\nconst { Text, Title } = Typography;\nconst { Content } = Layout;\n\nconst DismissButton = () => (\n  <span>\n    <Button\n      type=\"link\"\n      danger\n      icon={<CloseCircleTwoTone twoToneColor=\"#eb2f96\"/>}\n      style={{ marginRight: 8 }}\n    >\n    <span style={{color: 'grey'}}>Dismiss Post</span>\n    </Button>\n  </span>\n);\n\nconst PostTitle = ( {item} ) => (\n  <Row>\n    {item.unread === false ? '' : <Col xs={24} lg={3}><Tag color=\"#f50\">new!</Tag></Col>}\n    <Col xs={24} lg={10}>\n        <UserOutlined />\n        <Text code>{item.author}</Text>\n    </Col>\n    <Col xs={24} lg={8}>\n        <FieldTimeOutlined />\n        <Text code><Moment fromNow unix>{item.created_utc}</Moment></Text>\n    </Col>\n    <Col xs={24}>\n      <Title level={4}>{item.title}</Title>\n    </Col>\n  </Row>\n)\n\nclass Posts extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.handleSelectPost = this.handleSelectPost.bind(this)\n    this.handleDismissPost = this.handleDismissPost.bind(this)\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchPostsIfNeeded())\n  }\n\n  handleSelectPost(postId) {\n    this.props.dispatch(selectPost(postId))\n  }\n\n  handleDismissPost(postId) {\n    this.props.dispatch(dismissPost(postId))\n  }\n\n  render() {\n    const listData = this.props.items\n    return (\n      this.props.isFetching ? \n      <div className=\"loading-container\">\n        <Spin size=\"large\" />\n      </div> : (\n      <div>\n        <Layout>\n          <Content>\n              <List\n                itemLayout=\"vertical\"\n                size=\"small\"\n                pagination={{\n                pageSize: 10,\n                position: 'both'\n                }}\n                dataSource={listData}\n                renderItem={item => (\n                  <QueueAnim component=\"span\" type={['right', 'left']} leaveReverse>\n                    <List.Item\n                    style={{ padding: '20px 10px' }}\n                    key={item.title}\n                    actions={[\n                      <span onClick={ () => this.handleDismissPost(item.id) }>\n                        <DismissButton item={item} />\n                      </span>,\n                      <span onClick={ () => this.handleSelectPost(item.id) }>\n                        {item.num_comments} Comments\n                      </span>,\n                      <span onClick={ () => this.handleSelectPost(item.id) }>>></span>\n                    ]}\n                    >\n                      <List.Item.Meta\n                      title={\n                        <span className=\"mobile-container\" onClick={ () => this.handleSelectPost(item.id) }>\n                          <PostTitle item={item}  />\n                        </span>\n                      }\n                      avatar={\n                        <span className=\"mobile-container\" onClick={ () => this.handleSelectPost(item.id) }>\n                          <Avatar shape=\"square\" size={64} src={item.thumbnail} />\n                        </span>\n                      } />\n                      {item.content}\n                    </List.Item>\n                  </QueueAnim>\n                )}\n              />\n          </Content>\n        </Layout>\n        </div>\n      )\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { isFetching, lastUpdated, items } = state || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    items,\n    isFetching,\n    lastUpdated\n  }\n}\n\nPosts.propTypes = {\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nexport default connect(mapStateToProps)(Posts)","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Layout, Alert, Typography } from 'antd';\n\nconst { Title } = Typography;\nconst { Content } = Layout;\n\nconst PostImage = data => {\n  return ( data.thumbnail.indexOf('http') > -1 ? (<img alt=\"thubmnail\" src={ data.thumbnail } /> ) : '' )\n}\n\nclass Post extends React.Component {\n  \n  render() {\n    const { post } = this.props;\n    return (\n      <Layout style={ { position: 'fixed', zIndex: 1, padding: 20 }}>\n        <Content>\n          { this.props.isSelected ? (\n            <div className=\"details-container\">\n              <Title level={3}>{post.title}</Title>\n              <PostImage thumbnail={post.thumbnail}/>\n              <p style={ {padding: 10} }>{post.num_comments} Comments </p>\n            </div>\n            ) : (\n              <Alert\n                message=\"Looking for the latest news?\"\n                description=\"Please, select a post to see more details\"\n                type=\"info\"\n                showIcon\n                style={ {width: '100%'} }\n              />\n            )\n          }\n        </Content>\n      </Layout>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const post = state.items.find(\n    item => item.id === state.selectedId\n  ) || {\n    title: '',\n    description: ''\n  };\n  const isSelected = state.selectedId !== null\n\n  return {\n    post,\n    isSelected\n  };\n};\n\nexport default connect(mapStateToProps)(Post);","import React from 'react';\nimport 'antd/dist/antd.dark.css'\nimport './styles/app.css';\n\nimport { Layout, Row, Col, Button } from 'antd';\nimport { RedditOutlined, MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons';\nimport Posts from './components/posts/Posts';\nimport PostItem from './components/posts/PostItem';\n\nimport { connect } from 'react-redux'\n\nimport {\n  fetchPostsIfNeeded,\n  dismissAll\n} from './components/posts/PostActions'\n\nconst { Sider, Header, Content } = Layout;\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.handleDismissAll = this.handleDismissAll.bind(this)\n    this.handleFetchData = this.handleFetchData.bind(this)\n    this.state = {\n      collapsed: false\n    }\n  }\n\n  handleFetchData() {\n    this.props.dispatch(fetchPostsIfNeeded())\n  }\n\n  handleDismissAll() {\n    this.props.dispatch(dismissAll())\n  }\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Header style={ { position: 'fixed', zIndex: 1, width: '100%', padding: '0 30px'  }}>\n            <Row justify=\"start\">\n              <Col xs={3} lg={1}>\n              {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n                className: 'trigger',\n                onClick: this.toggle,\n                style: { fontSize: 20}\n              })}\n              </Col>\n              <Col xs={13} lg={7}>\n                <h4><RedditOutlined style={{marginRight: 8, fontSize: 20}}/>\n                  Simple Reddit Client\n                </h4>\n              </Col>\n              <Col xs={8} lg={4}>\n                { this.props.items.length > 0 ? (\n                  <Button danger size=\"small\" onClick={ () => this.handleDismissAll() }>\n                    Dismiss All\n                  </Button>\n                ) : (\n                  <Button type=\"primary\" size=\"small\" onClick={ () => this.handleFetchData() }>\n                    Fetch Data\n                  </Button>\n                )}\n              </Col>\n            </Row>\n          </Header>\n          <Content style={ { marginTop: 64 } }>\n            <Layout>\n              <Sider\n                trigger={null}\n                collapsible\n                collapsed={this.state.collapsed}\n                width=\"50%\"\n                className=\"sidebar-section\"\n                breakpoint=\"lg\"\n                collapsedWidth=\"0\">\n                <Posts/>\n              </Sider>\n              <Content className=\"post-details\">\n                <PostItem />\n              </Content>\n            </Layout>\n          </Content>\n      </Layout>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { isFetching, lastUpdated, items } = state || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    items,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}